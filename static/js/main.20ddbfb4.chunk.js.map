{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/TodolistsList/TodoList/Tasks/Task.tsx","components/TodolistsList/TodoList/Todolist.tsx","components/TodolistsList/TodoListsList.tsx","app/App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","model","put","todolistId","taskId","initialState","removeTaskTC","dispatch","then","type","removeTaskAC","AddItemForm","React","memo","props","console","log","useState","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","useDispatch","onClickHandler","useCallback","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","status","style","display","justifyContent","alignItems","Checkbox","Delete","Todolist","useEffect","res","tasks","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","textAlign","boxShadow","removeTodolist","map","removeTask","paddingTop","Button","TodoListsList","todolists","useSelector","state","item","addTaskAC","addTasksTC","changeStatus","todoListId","getState","find","description","deadline","startDate","priority","changeTaskStatusAC","updateTaskStatusTC","newTitle","resultCode","changeTaskTitleAC","todoList","tl","addedDate","order","changeTodolistFilterAC","removeTodoListsTC","changeTodolistTitleAC","changeTodoListTitleTC","addTodolist","createTodoListsTC","Grid","container","padding","spacing","margin","allTodolistTasks","Paper","backgroundColor","App","todoLists","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","rootReducer","combineReducers","action","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.20ddbfb4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppOld is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {TodolistDomainType} from \"../state/todolists-reducer\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a318ecb3-f5df-4512-99ed-aabe354d9b6f'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, model: TodolistDomainType) {\r\n        const promise = instance.put<ResponseType<{ item: TodolistType }>>(`todo-lists/${id}`, model);\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: \"all\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todoLists.map(tl => {return {...tl, filter: \"all\"}})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodolistAC = (todoList: TodolistType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const)\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todoLists} as const)\r\n\r\nexport const setTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodoListsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const createTodoListsTC = (title: string) => {\r\n    debugger\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTodolist(title)\r\n            .then(res => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\nexport const removeTodoListsTC = (id: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTodolist(id)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0)\r\n                    dispatch(removeTodolistAC(id))\r\n            })\r\n    }\r\n}\r\nexport const changeTodoListTitleTC = (title: string, id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const todoList = getState().todolists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todolistsAPI.updateTodolist(id, {title, id, order: todoList.order, addedDate: todoList.addedDate, filter: todoList.filter})\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0)\r\n                        dispatch(changeTodolistTitleAC(id, title))\r\n                })\r\n        }\r\n    }\r\n}\r\nexport const changeTodoListFilterTC = (id: string, filter: FilterValuesType) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const todoList = getState().todolists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todolistsAPI.updateTodolist(id, {id, filter, addedDate: todoList.addedDate, order: todoList.order, title: todoList.title})\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0)\r\n                        dispatch(changeTodolistFilterAC(id, filter))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import {TasksStateType} from '../junk/AppOld';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodoListsActionType} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter((t => t.id != action.taskId))}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, status: action.status} : t)}\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, title: action.title} : t)}\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                return copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const)\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => ({type: 'CHANGE-TASK-STATUS', status, todolistId, taskId} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\nexport const setTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n     todolistsAPI.getTasks(todolistId)\r\n         .then(res => {\r\n             dispatch(setTasksAC(res.data.items, todolistId))\r\n         })\r\n    }\r\n}\r\nexport const addTasksTC = (title: string, todolistId: string) => {\r\n    debugger\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then((res) => {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(todolistId, task))\r\n            })\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n     todolistsAPI.deleteTask (todolistId, taskId)\r\n         .then(() => {\r\n             dispatch(removeTaskAC(taskId, todolistId))\r\n         })\r\n    }\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, todoListId: string, status: TaskStatuses) => {\r\n    debugger\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            todolistsAPI.updateTask(todoListId, taskId, {\r\n                title: task.title,\r\n                status: status,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                startDate: task.startDate,\r\n                priority: task.priority\r\n            }).then(() => {\r\n                dispatch(changeTaskStatusAC(taskId, status, todoListId))\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const updateTaskTitleTC = (taskId: string, todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            todolistsAPI.updateTask(todoListId, taskId, {\r\n                title: title,\r\n                status: task.status,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                startDate: task.startDate,\r\n                priority: task.priority\r\n            }).then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTaskTC} from \"../../../../state/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = useCallback(() => dispatch(removeTaskTC(props.task.id, props.todolistId)), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Tasks/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../../../state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksTC} from \"../../../state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3 style={{textAlign: \"center\", boxShadow: \"2px 2px 2px 2px black\", display: \"flex\",\r\n            justifyContent: \"space-around\", alignItems: \"center\"}}>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <div style={{textAlign: \"center\"}}>\r\n            <AddItemForm addItem={addTask}/>\r\n        </div>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px', textAlign: \"center\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    changeTodoListFilterTC, changeTodoListTitleTC, createTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListsTC,\r\n    TodolistDomainType\r\n} from \"../../state/todolists-reducer\";\r\nimport React, {useCallback} from \"react\";\r\nimport {addTasksTC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"../../state/tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./TodoList/Todolist\";\r\n\r\nexport const TodoListsList = () => {\r\n\r\n    type TasksStateType = {\r\n        [key: string]: Array<TaskType>\r\n    }\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        debugger\r\n        dispatch(addTasksTC(title, todolistId))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoListId: string) {\r\n        debugger\r\n        dispatch(updateTaskStatusTC(id, todoListId, status));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(id, todolistId, newTitle));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodoListFilterTC(todolistId, value));\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodoListsTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodoListTitleTC(title, id));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodoListsTC(title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\", justifyContent: \"center\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={8} style={{justifyContent: \"center\", margin: \"20px\"}}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: \"20px\", backgroundColor: \"lightgrey\"}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {setTodoListsTC} from '../state/todolists-reducer'\r\nimport {useDispatch} from 'react-redux';\r\nimport {TodoListsList} from \"../components/TodolistsList/TodoListsList\";\r\n\r\nfunction App() {\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodoListsTC())\r\n    }, [])\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodoListsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}