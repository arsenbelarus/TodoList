{"version":3,"sources":["EditableSpan.tsx","Task.tsx","AddItemForm.tsx","TodolistHeader.tsx","TodolistButtons.tsx","Todolist.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["EditableSpan","React","memo","props","useState","editMode","setEditMode","title","setTitle","TextField","variant","value","onChange","e","currentTarget","autoFocus","onBlur","trim","onFinalChange","spellCheck","onDoubleClick","Task","key","taskId","className","isDone","Grid","container","justify","item","Checkbox","color","checked","newIsDoneValue","changeStatus","todolistId","IconButton","onClick","removeTask","AddItemForm","error","setError","addItem","label","onKeyPress","charCode","helperText","TodolistHeader","style","marginBottom","textAlign","padding","fontSize","boxShadow","cursor","changeHeaderTitle","removeTodoList","Delete","createTaskTitle","TodolistButtons","marginTop","Button","onAllClickHandler","filter","onActiveClickHandler","onCompletedClickHandler","Todolist","useCallback","addTask","id","changeFilter","tasksForTodoList","tasks","t","map","task","initialState","removeTodoListAC","todoListId","type","AddTodoListAC","v1","ChangeTodoListTitleAC","ChangeTodolistFilterAC","removeTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","taskTitle","addTodoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","spacing","tl","allTodoListsTasks","Paper","backgroundColor","border","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","stateCopy","newTask","newTodoList","todo","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8TAiCeA,EAzBMC,IAAMC,MAAK,SAACC,GAAkC,IAAD,EAChCC,oBAAkB,GADc,mBACzDC,EADyD,KAC/CC,EAD+C,OAEtCF,mBAASD,EAAMI,OAFuB,mBAEzDA,EAFyD,KAElDC,EAFkD,KAmB9D,OAAOH,EACD,kBAACI,EAAA,EAAD,CAAWC,QAAS,WAAYC,MAAOJ,EAAOK,SAL5B,SAACC,GACrBL,EAASK,EAAEC,cAAcH,QAKZI,WAAS,EAACC,OAdF,WACjBT,EAAMU,OACNd,EAAMe,cAAcX,GAEpBC,EAASL,EAAMI,OAEnBD,GAAY,IAQqCa,WAAY,UAC3D,0BAAMC,cAlBa,WACrBd,GAAY,KAiB8BC,M,iBCfrCc,EAAOpB,IAAMC,MAAK,SAACC,GAQ5B,OACI,yBAAKmB,IAAKnB,EAAMoB,OAAQC,UAAWrB,EAAMsB,OAAS,UAAY,IAC1D,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,iBACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACC,EAAA,EAAD,CAAUC,MAAO,UAAWC,QAAS7B,EAAMsB,OAAQb,SAXnC,SAACC,GAC7B,IAAIoB,EAAiBpB,EAAEC,cAAckB,QACrC7B,EAAM+B,aAAa/B,EAAMoB,OAAQU,EAAgB9B,EAAMgC,eAU3C,kBAAC,EAAD,CAAc5B,MAAOJ,EAAMI,MAAOW,cAR1B,SAACP,GACrBR,EAAMe,cAAcf,EAAMoB,OAAQZ,EAAOR,EAAMgC,gBASvC,kBAACT,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACO,EAAA,EAAD,CAAYC,QAAS,WACjBlC,EAAMmC,WAAWnC,EAAMoB,OAAQpB,EAAMgC,cAErC,kBAAC,IAAD,CAAkBJ,MAAO,qB,0BCgBlCQ,EA1CKtC,IAAMC,MAAM,SAACC,GAAiC,IAAD,EACrCC,mBAAiB,IADoB,mBACxDG,EADwD,KACjDC,EADiD,OAErCJ,mBAAwB,MAFa,mBAExDoC,EAFwD,KAEjDC,EAFiD,KAavDC,EAAU,WACS,KAAjBnC,EAAMU,OACNd,EAAMuC,QAAQnC,GAEdkC,EAAS,qBAEbjC,EAAS,KAIb,OACI,yBAAKQ,OAAQ,WAAOyB,EAAS,QACzB,kBAAChC,EAAA,EAAD,CACIC,QAAS,WACTiC,MAAO,sBACPhC,MAAOJ,EACPK,SAzBY,SAACC,GACjB2B,GAAQC,EAAS,IACrBjC,EAASK,EAAEC,cAAcH,QAwBjBiC,WAtBc,SAAC/B,GACJ,KAAfA,EAAEgC,UACFH,KAqBIF,QAASA,EACTM,WAAYN,IAEhB,kBAACJ,EAAA,EAAD,CAAYC,QAASK,EAASX,MAAO,WACjC,kBAAC,IAAD,WC9BHgB,EAAiB9C,IAAMC,MAAK,SAACC,GAEtC,OACI,yBAAK6C,MAAO,CAACC,aAAc,OAAQC,UAAW,WAC1C,wBAAIF,MAAO,CACPE,UAAW,SACXC,QAAS,SACTC,SAAU,SACVC,UAAW,8BACXC,OAAQ,SAER,kBAAC,EAAD,CAAc/C,MAAOJ,EAAMI,MAAOW,cAAef,EAAMoD,oBACvD,kBAACnB,EAAA,EAAD,CAAYC,QAASlC,EAAMqD,gBACvB,kBAACC,EAAA,EAAD,QAGR,kBAAC,EAAD,CAAaf,QAASvC,EAAMuD,sB,SCf3BC,EAAkB1D,IAAMC,MAAK,SAACC,GAEvC,OACI,yBAAK6C,MAAO,CAACY,UAAW,OAAQV,UAAW,WACvC,kBAACW,EAAA,EAAD,CAAQxB,QAASlC,EAAM2D,kBACfpD,QAA0B,QAAjBP,EAAM4D,OAAmB,WAAa,QADvD,SAEA,kBAACF,EAAA,EAAD,CAAQxB,QAASlC,EAAM6D,qBACftD,QAA0B,WAAjBP,EAAM4D,OAAsB,WAAa,QAD1D,YAEA,kBAACF,EAAA,EAAD,CAAQxB,QAASlC,EAAM8D,wBACfvD,QAA0B,cAAjBP,EAAM4D,OAAyB,WAAa,QAD7D,mBC6DGG,EAlDEjE,IAAMC,MAAK,SAACC,GAEzB,IAAMuD,EAAkBS,uBAAY,SAAC5D,GACjCJ,EAAMiE,QAAQ7D,EAAOJ,EAAMkE,MAC5B,CAAClE,EAAMiE,QAASjE,EAAMkE,KACnBP,EAAoBK,uBAAY,kBAAMhE,EAAMmE,aAAa,MAAOnE,EAAMkE,MAAK,CAAClE,EAAMmE,aAAcnE,EAAMkE,KACtGL,EAAuBG,uBAAY,kBAAMhE,EAAMmE,aAAa,SAAUnE,EAAMkE,MAAK,CAAClE,EAAMmE,aAAcnE,EAAMkE,KAC5GJ,EAA0BE,uBAAY,kBAAMhE,EAAMmE,aAAa,YAAanE,EAAMkE,MAAK,CAAClE,EAAMmE,aAAcnE,EAAMkE,KAClHb,EAAiBW,uBAAY,WAC/BhE,EAAMqD,eAAerD,EAAMkE,MAC5B,CAAClE,EAAMqD,eAAgBrD,EAAMkE,KAC1Bd,EAAoBY,uBAAY,SAACxD,GACnCR,EAAMoD,kBAAkB5C,EAAOR,EAAMkE,MACtC,CAAClE,EAAMoD,kBAAmBpD,EAAMkE,KAE/BE,EAAmBpE,EAAMqE,MACR,WAAjBrE,EAAM4D,SACNQ,EAAmBA,EAAiBR,QAAO,SAAAU,GAAC,OAAKA,EAAEhD,WAElC,cAAjBtB,EAAM4D,SACNQ,EAAmBA,EAAiBR,QAAO,SAAAU,GAAC,OAAIA,EAAEhD,WAItD,IAAM+C,EAAQD,EAAiBG,KAAI,SAACC,GAChC,OAAO,kBAACtD,EAAD,CAAMc,WAAYhC,EAAMkE,GAClB9C,OAAQoD,EAAKN,GACbnC,aAAc/B,EAAM+B,aACpBhB,cAAef,EAAMe,cACrBO,OAAQkD,EAAKlD,OACblB,MAAOoE,EAAKpE,MACZ+B,WAAYnC,EAAMmC,WAClBhB,IAAKqD,EAAKN,QAG3B,OACI,6BACI,kBAACtB,EAAD,CAAgBxC,MAAOJ,EAAMI,MAAOgD,kBAAmBA,EACvCC,eAAgBA,EAAgBE,gBAAiBA,IACjE,6BACKc,GAEL,kBAACb,EAAD,CAAiBG,kBAAmBA,EACnBE,qBAAsBA,EACtBC,wBAAyBA,EACzBF,OAAQ5D,EAAM4D,a,8FCrDrCa,EAA+B,GAuCxBC,EAAmB,SAACC,GAC7B,MAAO,CAAEC,KAAM,kBAAmBV,GAAIS,IAE7BE,EAAgB,SAACzE,GAC1B,MAAO,CAAEwE,KAAM,eAAgBxE,MAAOA,EAAO8D,GAAIY,iBAExCC,EAAwB,SAACb,EAAY9D,GAC9C,MAAO,CAAEwE,KAAM,wBAAyBV,GAAIA,EAAI9D,MAAOA,IAE9C4E,EAAyB,SAACpB,EAAyBM,GAC5D,MAAO,CAAEU,KAAM,yBAA0BhB,OAAQA,EAAQM,GAAIA,I,QC3C3DO,EAA0B,GA6CnBQ,EAAe,SAAC7D,EAAgBY,GACzC,MAAO,CAAC4C,KAAM,cAAexD,OAAQA,EAAQY,WAAYA,IAEhDkD,EAAY,SAAC9E,EAAe4B,GACrC,MAAO,CAAC4C,KAAM,WAAYxE,MAAOA,EAAO4B,WAAYA,IAE3CmD,EAAqB,SAAC/D,EAAgBE,EAAiBU,GAEhE,MAAO,CAAC4C,KAAM,qBAAsBxD,OAAQA,EAAQE,OAAQA,EAAQU,WAAYA,IAEvEoD,EAAoB,SAAChE,EAAgBhB,EAAe4B,GAC7D,MAAO,CAAC4C,KAAM,oBAAqBxD,OAAQA,EAAQhB,MAAOA,EAAO4B,WAAYA,I,QC8BlEqD,MA1Ff,WAGI,IAAMC,EAAYC,aAAmD,SAAAC,GAAK,OAAIA,EAAMC,aAC9EpB,EAAQkB,aAAyC,SAAAC,GAAK,OAAIA,EAAMnB,SAChEqB,EAAWC,cAEXxD,EAAa6B,uBAAY,SAACE,EAAYS,GACxCe,EAAST,EAAaf,EAAIS,MAC3B,CAACe,EAAUT,IAERhB,EAAUD,uBAAY,SAAC4B,EAAmBjB,GAC5Ce,EAASR,EAAUU,EAAWjB,MAC/B,CAACe,EAAUR,IAERnD,EAAeiC,uBAAY,SAAC5C,EAAgBE,EAAiBqD,GAC/De,EAASP,EAAmB/D,EAAQE,EAAQqD,MAC7C,CAACe,EAAUP,IAERpE,EAAgBiD,uBAAa,SAACE,EAAY1D,EAAemE,GAC3De,EAASN,EAAkBlB,EAAI1D,EAAOmE,MACvC,CAACe,EAAUN,IAERjB,EAAeH,uBAAY,SAACxD,EAAwBmE,GACtDe,EAASV,EAAuBxE,EAAOmE,MACxC,CAACe,EAAUV,IAER3B,EAAiBW,uBAAY,SAACE,GAChCwB,EAAShB,EAAiBR,MAC5B,CAACwB,EAAUhB,IAEPmB,EAAc7B,uBAAY,SAAC5D,GAC7BsF,EAASb,EAAczE,MACxB,CAACsF,EAAUb,IAERzB,EAAoBY,uBAAa,SAACxD,EAAemE,GACnDe,EAASX,EAAsBvE,EAAOmE,MACvC,CAACe,EAAUX,IAEd,OACI,yBAAK1D,UAAU,OACX,kBAACyE,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAAC/D,EAAA,EAAD,CAAYgE,KAAK,QAAQrE,MAAM,UAAUsE,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY7F,QAAQ,MAApB,YAGA,kBAACmD,EAAA,EAAD,CAAQ9B,MAAM,WAAd,WAGR,kBAACyE,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC/E,EAAA,EAAD,CAAMC,WAAS,EAACqB,MAAO,CAACG,QAAS,SAC7B,kBAAC,EAAD,CAAaT,QAASsD,KAE1B,kBAACtE,EAAA,EAAD,CAAMC,WAAS,EAAC+E,QAAS,EAAG9E,QAAS,UAChC6D,EAAUf,KAAI,SAAAiC,GACX,IAAIC,EAAoBpC,EAAMmC,EAAGtC,IAEjC,OAAO,kBAAC3C,EAAA,EAAD,CAAMG,MAAI,EAACP,IAAKqF,EAAGtC,IACtB,kBAAC,IAAD,KACI,kBAACwC,EAAA,EAAD,CAAO7D,MAAO,CACVG,QAAS,OACTS,UAAW,OACXkD,gBAAiB,YACjBC,OAAQ,sBACTC,UAAW,IACV,kBAAC,EAAD,CACI3C,GAAIsC,EAAGtC,GACP9D,MAAOoG,EAAGpG,MACViE,MAAOoC,EACPtE,WAAYA,EACZgC,aAAcA,EACdF,QAASA,EACTlC,aAAcA,EACdsB,eAAgBA,EAChBtC,cAAeA,EACfqC,kBAAmBA,EACnBQ,OAAQ4C,EAAG5C,mBC9F/BkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZAC,EAAcC,YAAgB,CAChC/C,MH0BwB,WAA+C,IAA9CmB,EAA6C,uDAArCf,EAAc4C,EAAuB,uCAClEC,EAAS,eAAO9B,GACpB,OAAQ6B,EAAOzC,MACX,IAAK,cAED,OADA0C,EAAUD,EAAOrF,YAAcsF,EAAUD,EAAOrF,YAAY4B,QAAO,SAAAY,GAAI,OAAIA,EAAKN,KAAOmD,EAAOjG,UACvFkG,EACX,IAAK,WACD,IAAIC,EAAU,CAACrD,GAAIY,eAAM1E,MAAOiH,EAAOjH,MAAOkB,QAAQ,GACtD,OAAO,2BACAkE,GADP,kBAEK6B,EAAOrF,WAFZ,CAE0BuF,GAF1B,mBAEsCD,EAAUD,EAAOrF,gBAE3D,IAAK,qBACD,OAAO,2BACAsF,GADP,kBACmBD,EAAOrF,WAD1B,YAC2CsF,EAAUD,EAAOrF,YAAYuC,KAAI,SAAAC,GACpE,OAAIA,EAAKN,KAAOmD,EAAOjG,OACZ,eAAIoD,GAEJ,2BAAIA,GAAX,IAAiBlD,OAAQ+F,EAAO/F,eAIhD,IAAK,oBACD,OAAO,2BACAgG,GADP,kBACmBD,EAAOrF,WAD1B,YAC2CsF,EAAUD,EAAOrF,YAAYuC,KAAI,SAAAC,GACpE,OAAIA,EAAKN,KAAOmD,EAAOjG,OACZ,eAAIoD,GAEJ,2BAAIA,GAAX,IAAiBpE,MAAOiH,EAAOjH,cAI/C,IAAK,eACD,OAAO,2BAAIoF,GAAX,kBAAmB6B,EAAOnD,GAAK,KACnC,IAAK,kBAED,cADOoD,EAAUD,EAAOnD,IACjBoD,EAEX,QACI,OAAO9B,IGhEfC,UJmB2B,WAA+C,IAA9CD,EAA6C,uDAArCf,EAAc4C,EAAuB,uCACzE,OAAQA,EAAOzC,MAEX,IAAK,kBACD,OAAOY,EAAM5B,QAAO,SAAA4C,GAAE,OAAIA,EAAGtC,KAAOmD,EAAOnD,MAE/C,IAAK,eACD,IAAIsD,EAA4B,CAC5BtD,GAAImD,EAAOnD,GACX9D,MAAOiH,EAAOjH,MACdwD,OAAQ,OAEZ,MAAM,GAAN,mBAAW4B,GAAX,CAAkBgC,IAEtB,IAAK,wBACD,OAAOhC,EAAMjB,KAAI,SAAAkD,GACb,OAAIA,EAAKvD,KAAOmD,EAAOnD,GACZuD,EAEA,2BAAIA,GAAX,IAAiBrH,MAAOiH,EAAOjH,WAI3C,IAAK,yBACD,OAAOoF,EAAMjB,KAAI,SAAAkD,GACb,OAAIA,EAAKvD,KAAOmD,EAAOnD,GACZuD,EAEA,2BAAIA,GAAX,IAAiB7D,OAAQyD,EAAOzD,YAI5C,QACI,OAAO4B,MIjDNkC,EAAQC,YAAYR,GAMjCJ,OAAOW,MAAQA,ECTfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OACSI,SAASC,eAAe,SFgInC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjG,GACLkG,QAAQlG,MAAMA,EAAMmG,c","file":"static/js/main.3052006f.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onFinalChange: (value: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const activateViewMode = () => {\r\n        if (title.trim()) {\r\n            props.onFinalChange(title)\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n        setEditMode(false)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant={\"standard\"} value={title} onChange={onChangeHandler}\r\n                     autoFocus onBlur={activateViewMode} spellCheck={\"false\"}/>\r\n        : <span onDoubleClick={activateEditMode}>{title}</span>\r\n})\r\n\r\nexport default EditableSpan\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {Checkbox, Grid, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\n\r\ntype PropsType = {\r\n    todolistId: string;\r\n    taskId: string;\r\n    changeStatus: (id: string, isDone: boolean, todoListId: string) => void;\r\n    onFinalChange: (id: string, value: string, todoListId: string) => void;\r\n    removeTask: (id: string, todoListId: string) => void;\r\n    isDone: boolean;\r\n    title: string;\r\n}\r\n\r\nexport const Task = React.memo((props: PropsType) => {\r\n    const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeStatus(props.taskId, newIsDoneValue, props.todolistId)\r\n    }\r\n    const changeTaskTitle = (value: string) => {\r\n        props.onFinalChange(props.taskId, value, props.todolistId)\r\n    }\r\n    return (\r\n        <div key={props.taskId} className={props.isDone ? \"is-done\" : \"\"}>\r\n            <Grid container justify={\"space-between\"}>\r\n                <Grid item>\r\n                    <Checkbox color={\"primary\"} checked={props.isDone} onChange={onCheckboxChangeHandler}/>\r\n                    <EditableSpan title={props.title} onFinalChange={changeTaskTitle}/>\r\n                </Grid>\r\n                <Grid item>\r\n                    <IconButton onClick={() => {\r\n                        props.removeTask(props.taskId, props.todolistId)\r\n                    }}>\r\n                        <HighlightOffIcon color={\"secondary\"}/>\r\n                    </IconButton>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void;\r\n}\r\n\r\nconst AddItemForm = React.memo ((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>(\"\");\r\n    let [error, setError] = useState<null | string>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) {setError(\"\")};\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    };\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setTitle(\"\");\r\n    };\r\n\r\n\r\n    return (\r\n        <div onBlur={() => {setError(null)}}>\r\n            <TextField\r\n                variant={\"standard\"}\r\n                label={\"Type your text here\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton onClick={addItem} color={\"primary\"}>\r\n                <AddCircleOutlineIcon />\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm\r\n","import React from \"react\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport AddItemForm from \"./AddItemForm\";\r\n\r\ntype TodolistHeaderPropsType = {\r\n    title: string;\r\n    changeHeaderTitle: (value: string) => void;\r\n    removeTodoList: () => void;\r\n    createTaskTitle: (title: string) => void;\r\n}\r\n\r\nexport const TodolistHeader = React.memo((props: TodolistHeaderPropsType) => {\r\n\r\n    return (\r\n        <div style={{marginBottom: \"20px\", textAlign: \"center\"}}>\r\n            <h2 style={{\r\n                textAlign: \"center\",\r\n                padding: \"0.5rem\",\r\n                fontSize: \"1.5rem\",\r\n                boxShadow: \"0 0 10px rgba(0, 0, 0, 0.8)\",\r\n                cursor: 'move',\r\n            }}>\r\n                <EditableSpan title={props.title} onFinalChange={props.changeHeaderTitle}/>\r\n                <IconButton onClick={props.removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h2>\r\n            <AddItemForm addItem={props.createTaskTitle}/>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {FilterValueType} from \"./AppWithRedux\";\r\n\r\ntype TodolistButtonsPropsType = {\r\n    onAllClickHandler: () => void;\r\n    onActiveClickHandler: () => void;\r\n    onCompletedClickHandler: () => void;\r\n    filter: FilterValueType;\r\n}\r\n\r\nexport const TodolistButtons = React.memo((props: TodolistButtonsPropsType) => {\r\n\r\n    return (\r\n        <div style={{marginTop: \"20px\", textAlign: \"center\"}}>\r\n            <Button onClick={props.onAllClickHandler}\r\n                    variant={props.filter === \"all\" ? \"outlined\" : \"text\"}> All </Button>\r\n            <Button onClick={props.onActiveClickHandler}\r\n                    variant={props.filter === \"active\" ? \"outlined\" : \"text\"}> Active </Button>\r\n            <Button onClick={props.onCompletedClickHandler}\r\n                    variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}> Completed </Button>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport './App.css';\r\nimport {FilterValueType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, Grid, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {Task} from \"./Task\";\r\nimport {TodolistHeader} from \"./TodolistHeader\";\r\nimport {TodolistButtons} from \"./TodolistButtons\";\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n}\r\n\r\ntype PropsType = {\r\n    id: string;\r\n    title: string;\r\n    tasks: Array<TaskType>;\r\n    removeTask: (id: string, todoListId: string) => void;\r\n    changeFilter: (value: FilterValueType, todoListId: string) => void;\r\n    addTask: (taskTitle: string, todoListId: string) => void;\r\n    changeStatus: (id: string, isDone: boolean, todoListId: string) => void;\r\n    removeTodoList: (id: string) => void\r\n    onFinalChange: (id: string, value: string, todoListId: string) => void;\r\n    changeHeaderTitle: (value: string, id: string) => void;\r\n    filter: FilterValueType;\r\n}\r\n\r\n\r\nconst Todolist = React.memo((props: PropsType) => {\r\n\r\n    const createTaskTitle = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\r\n    const removeTodoList = useCallback(() => {\r\n        props.removeTodoList(props.id)\r\n    }, [props.removeTodoList, props.id])\r\n    const changeHeaderTitle = useCallback((value: string) => {\r\n        props.changeHeaderTitle(value, props.id)\r\n    }, [props.changeHeaderTitle, props.id])\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\r\n    }\r\n\r\n\r\n    const tasks = tasksForTodoList.map((task: TaskType) => {\r\n        return <Task todolistId={props.id}\r\n                     taskId={task.id}\r\n                     changeStatus={props.changeStatus}\r\n                     onFinalChange={props.onFinalChange}\r\n                     isDone={task.isDone}\r\n                     title={task.title}\r\n                     removeTask={props.removeTask}\r\n                     key={task.id}/>\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <TodolistHeader title={props.title} changeHeaderTitle={changeHeaderTitle}\r\n                            removeTodoList={removeTodoList} createTaskTitle={createTaskTitle}/>\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n            <TodolistButtons onAllClickHandler={onAllClickHandler}\r\n                             onActiveClickHandler={onActiveClickHandler}\r\n                             onCompletedClickHandler={onCompletedClickHandler}\r\n                             filter={props.filter}/>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Todolist;","import {TodoListType, FilterValueType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\",\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\",\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    filter: FilterValueType\r\n    id: string\r\n}\r\n\r\ntype ActionType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\r\n\r\nconst initialState: TodoListType[] = [];\r\n\r\nexport const todoListReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n\r\n        case 'ADD-TODOLIST':\r\n            let newTodoList: TodoListType = {\r\n                id: action.id,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }\r\n            return [...state, newTodoList];\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(todo => {\r\n                if (todo.id !== action.id) {\r\n                    return todo\r\n                } else {\r\n                    return {...todo, title: action.title}\r\n                }\r\n            })\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(todo => {\r\n                if (todo.id !== action.id) {\r\n                    return todo\r\n                } else {\r\n                    return {...todo, filter: action.filter}\r\n                }\r\n            })\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodolistActionType => {\r\n    return { type: \"REMOVE-TODOLIST\", id: todoListId}\r\n}\r\nexport const AddTodoListAC = (title: string): AddTodolistActionType => {\r\n    return { type: \"ADD-TODOLIST\", title: title, id: v1()}\r\n}\r\nexport const ChangeTodoListTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title}\r\n}\r\nexport const ChangeTodolistFilterAC = (filter: FilterValueType, id: string): ChangeTodolistFilterActionType => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: id}\r\n}","import {StateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolist-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\",\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type changeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\nexport type changeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\n\r\ntype ActionType = RemoveTaskActionType | AddTaskActionType | changeTaskStatusActionType\r\n    | changeTaskTitleActionType | AddTodolistActionType | RemoveTodolistActionType\r\n\r\nconst initialState: StateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType) => {\r\n    let stateCopy = {...state}\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            stateCopy[action.todolistId] = stateCopy[action.todolistId].filter(task => task.id !== action.taskId)\r\n            return stateCopy;\r\n        case \"ADD-TASK\":\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...stateCopy[action.todolistId]]\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...stateCopy, [action.todolistId]: [...stateCopy[action.todolistId].map(task => {\r\n                    if (task.id !== action.taskId) {\r\n                        return {...task}\r\n                    } else {\r\n                        return {...task, isDone: action.isDone}\r\n                    }\r\n                })]\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...stateCopy, [action.todolistId]: [...stateCopy[action.todolistId].map(task => {\r\n                    if (task.id !== action.taskId) {\r\n                        return {...task}\r\n                    } else {\r\n                        return {...task, title: action.title}\r\n                    }\r\n                })]\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.id]: []}\r\n        case \"REMOVE-TODOLIST\":\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE-TASK\", taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", title: title, todolistId: todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string, ): changeTaskStatusActionType => {\r\n    debugger\r\n    return {type: \"CHANGE-TASK-STATUS\", taskId: taskId, isDone: isDone, todolistId: todolistId,}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): changeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", taskId: taskId, title: title, todolistId: todolistId}\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport Todolist, {TaskType} from \"./Todolist\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Draggable from 'react-draggable'\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodolistFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./state/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValueType,\r\n}\r\nexport type StateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, StateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n        dispatch(removeTaskAC(id, todoListId))\r\n    }, [dispatch, removeTaskAC])\r\n\r\n    const addTask = useCallback((taskTitle: string, todoListId: string) => {\r\n        dispatch(addTaskAC(taskTitle, todoListId))\r\n    }, [dispatch, addTaskAC])\r\n\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId))\r\n    }, [dispatch, changeTaskStatusAC])\r\n\r\n    const onFinalChange = useCallback ((id: string, value: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleAC(id, value, todoListId))\r\n    }, [dispatch, changeTaskTitleAC])\r\n\r\n    const changeFilter = useCallback((value: FilterValueType, todoListId: string) => {\r\n        dispatch(ChangeTodolistFilterAC(value, todoListId))\r\n    }, [dispatch, ChangeTodolistFilterAC])\r\n\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(removeTodoListAC(id))\r\n    },[dispatch, removeTodoListAC])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(AddTodoListAC(title))\r\n    }, [dispatch, AddTodoListAC])\r\n\r\n    const changeHeaderTitle = useCallback ((value: string, todoListId: string) => {\r\n        dispatch(ChangeTodoListTitleAC(value, todoListId))\r\n    }, [dispatch, ChangeTodoListTitleAC])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TODOLIST\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={8} justify={\"center\"}>\r\n                    {todoLists.map(tl => {\r\n                        let allTodoListsTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Draggable>\r\n                                <Paper style={{\r\n                                    padding: \"20px\",\r\n                                    marginTop: \"30px\",\r\n                                    backgroundColor: \"lightgrey\",\r\n                                    border: \"1px solid darkblue\"\r\n                                }} elevation={10}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodoListsTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        onFinalChange={onFinalChange}\r\n                                        changeHeaderTitle={changeHeaderTitle}\r\n                                        filter={tl.filter}/>\r\n                                </Paper>\r\n                            </Draggable>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}