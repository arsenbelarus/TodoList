{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","model","put","todolistId","taskId","initialState","removeTaskTC","dispatch","then","type","removeTaskAC","Task","useDispatch","onClickHandler","useCallback","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","status","Checkbox","Delete","Todolist","useEffect","res","tasks","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","removeTask","style","paddingTop","Button","AppWithRedux","todoLists","todolists","useSelector","state","item","addTaskAC","addTasksTC","changeStatus","todoListId","getState","find","description","deadline","startDate","priority","changeTaskStatusAC","updateTaskStatusTC","newTitle","resultCode","changeTaskTitleAC","todoList","tl","addedDate","order","changeTodolistFilterAC","removeTodoListsTC","changeTodolistTitleAC","changeTodoListTitleTC","addTodolist","createTodoListsTC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","allTodolistTasks","Paper","rootReducer","combineReducers","action","stateCopy","newTasks","todolistTasks","copyState","forEach","todolist","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0bb9ed25.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {TodolistDomainType} from \"../state/todolists-reducer\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a318ecb3-f5df-4512-99ed-aabe354d9b6f'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, model: TodolistDomainType) {\r\n        const promise = instance.put<ResponseType<{ item: TodolistType }>>(`todo-lists/${id}`, model);\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodoListsActionType} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoListsActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id != action.taskId);\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                return copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    debugger\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport const setTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n     todolistsAPI.getTasks(todolistId)\r\n         .then(res => {\r\n             dispatch(setTasksAC(res.data.items, todolistId))\r\n         })\r\n    }\r\n}\r\nexport const addTasksTC = (title: string, todolistId: string) => {\r\n    debugger\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then((res) => {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(todolistId, task))\r\n            })\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n     todolistsAPI.deleteTask (todolistId, taskId)\r\n         .then(() => {\r\n             dispatch(removeTaskAC(taskId, todolistId))\r\n         })\r\n    }\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, todoListId: string, status: TaskStatuses) => {\r\n    debugger\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            todolistsAPI.updateTask(todoListId, taskId, {\r\n                title: task.title,\r\n                status: status,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                startDate: task.startDate,\r\n                priority: task.priority\r\n            }).then(() => {\r\n                dispatch(changeTaskStatusAC(taskId, status, todoListId))\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const updateTaskTitleTC = (taskId: string, todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            todolistsAPI.updateTask(todoListId, taskId, {\r\n                title: title,\r\n                status: task.status,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                startDate: task.startDate,\r\n                priority: task.priority\r\n            }).then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTaskTC} from \"./state/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = useCallback(() => dispatch(removeTaskTC(props.task.id, props.todolistId)), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todoList: TodolistType,\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodoListsActionType = {\r\n    type: 'SET-TODOLISTS',\r\n    todoLists: Array<TodolistType>\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodoListsActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.todoList, filter: \"all\"}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todoLists.map(tl => {\r\n                return {...tl, filter: \"all\"}\r\n            })\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (todoList: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todoList}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>): SetTodoListsActionType => {\r\n    return {type: 'SET-TODOLISTS', todoLists}\r\n}\r\n\r\nexport const setTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodoListsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const createTodoListsTC = (title: string) => {\r\n    debugger\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTodolist(title)\r\n            .then(res => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\nexport const removeTodoListsTC = (id: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTodolist(id)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0)\r\n                    dispatch(removeTodolistAC(id))\r\n            })\r\n    }\r\n}\r\nexport const changeTodoListTitleTC = (title: string, id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const todoList = getState().todolists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todolistsAPI.updateTodolist(id, {title, id, order: todoList.order, addedDate: todoList.addedDate, filter: todoList.filter})\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0)\r\n                        dispatch(changeTodolistTitleAC(id, title))\r\n                })\r\n        }\r\n    }\r\n}\r\nexport const changeTodoListFilterTC = (id: string, filter: FilterValuesType) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const todoList = getState().todolists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todolistsAPI.updateTodolist(id, {id, filter, addedDate: todoList.addedDate, order: todoList.order, title: todoList.title})\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0)\r\n                        dispatch(changeTodolistFilterAC(id, filter))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    changeTodoListFilterTC, changeTodoListTitleTC, createTodoListsTC, FilterValuesType,\r\n    removeTodoListsTC, setTodoListsTC, TodolistDomainType,\r\n} from './state/todolists-reducer'\r\nimport {\r\n    addTasksTC,\r\n    removeTaskTC,\r\n    updateTaskStatusTC, updateTaskTitleTC\r\n} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodoListsTC())\r\n    }, [])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        debugger\r\n        dispatch(addTasksTC(title, todolistId))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoListId: string) {\r\n        debugger\r\n        dispatch(updateTaskStatusTC(id, todoListId, status));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(id, todolistId, newTitle));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodoListFilterTC(todolistId, value));\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodoListsTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodoListTitleTC(title, id));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodoListsTC(title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}