{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","state/app-reducer.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/TodolistsList/TodoList/Tasks/Task.tsx","components/TodolistsList/TodoList/Todolist.tsx","components/TodolistsList/TodoListsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","app/App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","model","put","todolistId","taskId","initialState","status","error","setAppStatusAC","type","setAppErrorAC","removeTaskTC","dispatch","then","removeTaskAC","AddItemForm","React","memo","props","console","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","entityStatus","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","useDispatch","onClickHandler","useCallback","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","style","display","justifyContent","alignItems","Checkbox","Delete","Todolist","useEffect","res","tasks","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","textAlign","boxShadow","removeTodolist","map","removeTask","paddingTop","Button","TodoListsList","todolists","useSelector","state","resultCode","item","addTaskAC","messages","catch","message","finally","addTasksTC","changeStatus","todoListId","getState","find","description","deadline","startDate","priority","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","todoList","tl","addedDate","order","changeTodolistFilterAC","changeTodolistEntityStatusAC","removeTodoListsTC","changeTodolistTitleAC","changeTodoListTitleTC","addTodolist","createTodoListsTC","Grid","container","padding","spacing","margin","allTodolistTasks","Paper","backgroundColor","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","todoLists","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","action","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a8de808.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppOld is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {TodolistDomainType} from \"../state/todolists-reducer\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a318ecb3-f5df-4512-99ed-aabe354d9b6f'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, model: TodolistDomainType) {\r\n        const promise = instance.put<ResponseType<{ item: TodolistType }>>(`todo-lists/${id}`, model);\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'SET-ERROR-MESSAGE':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'SET-APP-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'SET-ERROR-MESSAGE', error} as const)\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todoLists.map(tl => {\r\n                return {...tl, filter: \"all\", entityStatus: \"idle\"}\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodolistAC = (todoList: TodolistType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: id,\r\n    title: title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: id,\r\n    filter: filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id: id,\r\n    entityStatus\r\n} as const)\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todoLists} as const)\r\n\r\n\r\nexport const setTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodoListsAC(res.data))\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const createTodoListsTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTodolist(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                } else if (res.data.resultCode === 1) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const removeTodoListsTC = (id: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodolistEntityStatusAC(id, \"loading\"))\r\n        todolistsAPI.deleteTodolist(id)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0)\r\n                    dispatch(removeTodolistAC(id))\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const changeTodoListTitleTC = (title: string, id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const todoList = getState().todolists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistsAPI.updateTodolist(id, {\r\n                title,\r\n                id,\r\n                order: todoList.order,\r\n                addedDate: todoList.addedDate,\r\n                filter: todoList.filter,\r\n                entityStatus: \"idle\"\r\n            })\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(changeTodolistTitleAC(id, title))\r\n                        dispatch(setAppStatusAC(\"idle\"))\r\n                    } else if (res.data.resultCode === 1) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                        dispatch(setAppStatusAC(\"idle\"))\r\n                    }\r\n                })\r\n                .catch\r\n                (error => {\r\n                    dispatch(setAppErrorAC(error.message))\r\n                })\r\n        }\r\n    }\r\n}\r\nexport const changeTodoListFilterTC = (id: string, filter: FilterValuesType) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const todoList = getState().todolists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistsAPI.updateTodolist(id, {\r\n                id,\r\n                filter,\r\n                addedDate: todoList.addedDate,\r\n                order: todoList.order,\r\n                title: todoList.title,\r\n                entityStatus: \"idle\"\r\n            })\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0)\r\n                        dispatch(changeTodolistFilterAC(id, filter))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import {\r\n    AddTodolistActionType,\r\n    changeTodolistEntityStatusAC,\r\n    RemoveTodolistActionType,\r\n    SetTodoListsActionType\r\n} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter((t => t.id != action.taskId))}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state, [action.todoList.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                return copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    taskId: taskId,\r\n    todolistId: todolistId\r\n} as const)\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    status,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    title,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\nexport const setTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const addTasksTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    let task = res.data.data.item\r\n                    dispatch(addTaskAC(todolistId, task))\r\n                } else if (res.data.resultCode === 1) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n            })\r\n            .finally( () => {\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then(() => {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, todoListId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistsAPI.updateTask(todoListId, taskId, {\r\n                title: task.title,\r\n                status: status,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                startDate: task.startDate,\r\n                priority: task.priority\r\n            }).then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTaskStatusAC(taskId, status, todoListId))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const updateTaskTitleTC = (taskId: string, todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistsAPI.updateTask(todoListId, taskId, {\r\n                title: title,\r\n                status: task.status,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                startDate: task.startDate,\r\n                priority: task.priority\r\n            }).then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                } else if (res.data.resultCode === 1) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                }\r\n            })\r\n                .catch\r\n                (error => {\r\n                    dispatch(setAppErrorAC(error.message))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === \"loading\"}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === \"loading\"}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTaskTC} from \"../../../../state/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = useCallback(() => dispatch(removeTaskTC(props.task.id, props.todolistId)), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Tasks/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../../../state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksTC} from \"../../../state/tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../state/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3 style={{textAlign: \"center\", boxShadow: \"2px 2px 2px 2px black\", display: \"flex\",\r\n            justifyContent: \"space-around\", alignItems: \"center\"}}>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <div style={{textAlign: \"center\"}}>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        </div>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px', textAlign: \"center\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    changeTodoListFilterTC, changeTodoListTitleTC, createTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListsTC,\r\n    TodolistDomainType\r\n} from \"../../state/todolists-reducer\";\r\nimport React, {useCallback} from \"react\";\r\nimport {addTasksTC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"../../state/tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./TodoList/Todolist\";\r\n\r\nexport const TodoListsList = () => {\r\n\r\n    type TasksStateType = {\r\n        [key: string]: Array<TaskType>\r\n    }\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        debugger\r\n        dispatch(addTasksTC(title, todolistId))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoListId: string) {\r\n        debugger\r\n        dispatch(updateTaskStatusTC(id, todoListId, status));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(id, todolistId, newTitle));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodoListFilterTC(todolistId, value));\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodoListsTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodoListTitleTC(title, id));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodoListsTC(title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\", justifyContent: \"center\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={8} style={{justifyContent: \"center\", margin: \"20px\"}}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: \"20px\", backgroundColor: \"lightgrey\"}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    entityStatus={tl.entityStatus}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {setTodoListsTC} from '../state/todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TodoListsList} from \"../components/TodolistsList/TodoListsList\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\n\r\nfunction App() {\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodoListsTC())\r\n    }, [])\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\" style={{backgroundColor: \"grey\"}}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" && <LinearProgress color=\"primary\"/>}\r\n            <Container fixed>\r\n                <TodoListsList/>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}