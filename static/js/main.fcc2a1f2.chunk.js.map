{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","api/auth-api.ts","login/auth-reducer.ts","state/app-reducer.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/TodolistsList/TodoList/Tasks/Task.tsx","components/TodolistsList/TodoList/Todolist.tsx","components/TodolistsList/TodoListsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","login/Login.tsx","loader/Loader.tsx","app/App.tsx","state/store.ts","index.tsx","loader/Loader.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","model","put","todolistId","taskId","authAPI","data","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","setAppStatusAC","setAppErrorAC","removeTaskTC","dispatch","then","removeTaskAC","catch","message","AddItemForm","React","memo","props","console","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","entityStatus","style","backgroundColor","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","useDispatch","onClickHandler","useCallback","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","display","justifyContent","alignItems","Checkbox","Delete","Todolist","useEffect","res","tasks","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","textAlign","boxShadow","removeTodolist","map","removeTask","paddingTop","Button","TodoListsList","todolists","useSelector","state","auth","todoLists","resultCode","item","addTaskAC","messages","finally","addTasksTC","changeStatus","todoListId","getState","find","description","deadline","startDate","priority","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","todoList","tl","addedDate","order","changeTodolistFilterAC","changeTodolistEntityStatusAC","removeTodoListsTC","changeTodolistTitleAC","changeTodoListTitleTC","addTodolist","createTodoListsTC","Grid","container","padding","spacing","marginTop","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","handleChange","name","Loader","loader","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","a","LinearProgress","Container","fixed","exact","path","render","top","width","rootReducer","combineReducers","action","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fcc2a1f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppOld is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {TodolistDomainType} from \"../state/todolists-reducer\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a318ecb3-f5df-4512-99ed-aabe354d9b6f'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, model: TodolistDomainType) {\r\n        const promise = instance.put<ResponseType<{ item: TodolistType }>>(`todo-lists/${id}`, model);\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import axios from 'axios'\r\nimport {TodolistDomainType} from \"../state/todolists-reducer\";\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'a318ecb3-f5df-4512-99ed-aabe354d9b6f'\r\n  }\r\n}\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  ...settings\r\n})\r\n\r\ntype ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: D\r\n}\r\n\r\ntype AuthMeType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\ntype LoginType = {\r\n  userId: number\r\n}\r\n\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n\r\n  me() {\r\n    return instance.get<ResponseType<AuthMeType>>('/auth/me')\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType>('/auth/login')\r\n  },\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponseType<LoginType>>('auth/login', data)\r\n  }\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../state/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../api/auth-api\";\r\n\r\nconst initialState: InitialStateType = {\r\n  isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'login/SET-IS-LOGGED-IN':\r\n      return {...state, isLoggedIn: action.value}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n  ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        dispatch(setAppErrorAC(res.data.messages[0]))\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      dispatch(setAppErrorAC(error.message))\r\n    })\r\n    .finally(() => {\r\n      dispatch(setAppStatusAC('idle'))\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch<ActionsType>) => {\r\n  debugger\r\n  dispatch(setAppStatusAC('loading'))\r\n  const res = await authAPI.logout()\r\n  try {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(false))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      dispatch(setAppErrorAC(res.data.messages[0]))\r\n    }\r\n  } catch (error) {\r\n    dispatch(setAppErrorAC(error.message))\r\n  } finally {\r\n    dispatch(setAppStatusAC('idle'))\r\n  }\r\n}\r\n\r\n\r\n// types\r\nexport type FormErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n  captcha?: string\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\ntype InitialStateType = {\r\n  isLoggedIn: boolean\r\n}\r\n","import {setIsLoggedInAC} from \"../login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n  status: RequestStatusType,\r\n  error: string | null,\r\n  isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SET-APP-STATUS':\r\n      return {...state, status: action.status}\r\n    case 'SET-ERROR-MESSAGE':\r\n      return {...state, error: action.error}\r\n    case 'SET-IS-INITIALIZED':\r\n      return {...state, isInitialized: action.isInitialized}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'SET-APP-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'SET-ERROR-MESSAGE', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(true));\r\n    } else {\r\n      dispatch(setIsLoggedInAC(false))\r\n    }\r\n    dispatch(setIsInitializedAC(true))\r\n  })\r\n}\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\n  | SetIsInitializedActionType","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todoLists.map(tl => {\r\n                return {...tl, filter: \"all\", entityStatus: \"idle\"}\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodolistAC = (todoList: TodolistType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: id,\r\n    title: title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: id,\r\n    filter: filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id: id,\r\n    entityStatus\r\n} as const)\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todoLists} as const)\r\n\r\n\r\nexport const setTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodoListsAC(res.data))\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const createTodoListsTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTodolist(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                } else if (res.data.resultCode === 1) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const removeTodoListsTC = (id: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodolistEntityStatusAC(id, \"loading\"))\r\n        todolistsAPI.deleteTodolist(id)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0)\r\n                    dispatch(removeTodolistAC(id))\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const changeTodoListTitleTC = (title: string, id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const todoList = getState().todolists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistsAPI.updateTodolist(id, {\r\n                title,\r\n                id,\r\n                order: todoList.order,\r\n                addedDate: todoList.addedDate,\r\n                filter: todoList.filter,\r\n                entityStatus: \"idle\"\r\n            })\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(changeTodolistTitleAC(id, title))\r\n                        dispatch(setAppStatusAC(\"idle\"))\r\n                    } else if (res.data.resultCode === 1) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                        dispatch(setAppStatusAC(\"idle\"))\r\n                    }\r\n                })\r\n                .catch\r\n                (error => {\r\n                    dispatch(setAppErrorAC(error.message))\r\n                })\r\n        }\r\n    }\r\n}\r\nexport const changeTodoListFilterTC = (id: string, filter: FilterValuesType) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const todoList = getState().todolists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistsAPI.updateTodolist(id, {\r\n                id,\r\n                filter,\r\n                addedDate: todoList.addedDate,\r\n                order: todoList.order,\r\n                title: todoList.title,\r\n                entityStatus: \"idle\"\r\n            })\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0)\r\n                        dispatch(changeTodolistFilterAC(id, filter))\r\n                    dispatch(setAppStatusAC(\"idle\"))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import {\r\n  AddTodolistActionType,\r\n  changeTodolistEntityStatusAC,\r\n  RemoveTodolistActionType,\r\n  SetTodoListsActionType\r\n} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof changeTaskStatusAC>\r\n  | ReturnType<typeof changeTaskTitleAC>\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodoListsActionType\r\n  | ReturnType<typeof setTasksAC>\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {...state, [action.todolistId]: state[action.todolistId].filter((t => t.id != action.taskId))}\r\n    case 'ADD-TASK':\r\n      return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n    case 'CHANGE-TASK-STATUS':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n          ...t,\r\n          status: action.status\r\n        } : t)\r\n      }\r\n    case 'CHANGE-TASK-TITLE':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n          ...t,\r\n          title: action.title\r\n        } : t)\r\n      }\r\n    case 'ADD-TODOLIST':\r\n      return {\r\n        ...state, [action.todoList.id]: []\r\n      }\r\n    case 'REMOVE-TODOLIST': {\r\n      const copyState = {...state};\r\n      delete copyState[action.id];\r\n      return copyState;\r\n    }\r\n    case \"SET-TODOLISTS\": {\r\n      const copyState = {...state}\r\n      action.todoLists.forEach(tl => {\r\n        return copyState[tl.id] = []\r\n      })\r\n      return copyState\r\n    }\r\n    case \"SET-TASKS\":\r\n      return {...state, [action.todolistId]: action.tasks}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n  type: 'REMOVE-TASK',\r\n  taskId: taskId,\r\n  todolistId: todolistId\r\n} as const)\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => ({\r\n  type: 'CHANGE-TASK-STATUS',\r\n  status,\r\n  todolistId,\r\n  taskId\r\n} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({\r\n  type: 'CHANGE-TASK-TITLE',\r\n  title,\r\n  todolistId,\r\n  taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n  type: 'SET-TASKS',\r\n  tasks,\r\n  todolistId\r\n} as const)\r\n\r\nexport const setTasksTC = (todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId)\r\n      .then(res => {\r\n        dispatch(setTasksAC(res.data.items, todolistId))\r\n        dispatch(setAppStatusAC(\"idle\"))\r\n      })\r\n  }\r\n}\r\nexport const addTasksTC = (title: string, todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          let task = res.data.data.item\r\n          dispatch(addTaskAC(todolistId, task))\r\n        } else if (res.data.resultCode === 1) {\r\n          dispatch(setAppErrorAC(res.data.messages[0]))\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch(setAppErrorAC(error.message))\r\n      })\r\n      .finally(() => {\r\n        dispatch(setAppStatusAC(\"idle\"))\r\n      })\r\n  }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n      .then(() => {\r\n        dispatch(removeTaskAC(taskId, todolistId))\r\n        dispatch(setAppStatusAC(\"idle\"))\r\n      })\r\n      .catch(error => {\r\n      dispatch(setAppErrorAC(error.message))\r\n    })\r\n  }\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, todoListId: string, status: TaskStatuses) => {\r\n  return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n    if (task) {\r\n      dispatch(setAppStatusAC(\"loading\"))\r\n      todolistsAPI.updateTask(todoListId, taskId, {\r\n        title: task.title,\r\n        status: status,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        startDate: task.startDate,\r\n        priority: task.priority\r\n      }).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(changeTaskStatusAC(taskId, status, todoListId))\r\n          dispatch(setAppStatusAC(\"idle\"))\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\nexport const updateTaskTitleTC = (taskId: string, todoListId: string, title: string) => {\r\n  return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n    if (task) {\r\n      dispatch(setAppStatusAC(\"loading\"))\r\n      todolistsAPI.updateTask(todoListId, taskId, {\r\n        title: title,\r\n        status: task.status,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        startDate: task.startDate,\r\n        priority: task.priority\r\n      }).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n          dispatch(setAppStatusAC(\"idle\"))\r\n        } else if (res.data.resultCode === 1) {\r\n          dispatch(setAppErrorAC(res.data.messages[0]))\r\n          dispatch(setAppStatusAC(\"idle\"))\r\n        }\r\n      })\r\n        .catch\r\n        (error => {\r\n          dispatch(setAppErrorAC(error.message))\r\n        })\r\n    }\r\n  }\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === \"loading\"}\r\n                   style={{backgroundColor: \"#efc700\"}}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === \"loading\"}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTaskTC} from \"../../../../state/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = useCallback(() => dispatch(removeTaskTC(props.task.id, props.todolistId)), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Tasks/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../../../state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksTC} from \"../../../state/tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../state/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3 style={{textAlign: \"center\", boxShadow: \"2px 2px 2px 2px black\", display: \"flex\",\r\n            justifyContent: \"space-around\", alignItems: \"center\"}}>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <div style={{textAlign: \"center\"}}>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        </div>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px', textAlign: \"center\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    changeTodoListFilterTC, changeTodoListTitleTC, createTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListsTC, setTodoListsTC,\r\n    TodolistDomainType\r\n} from \"../../state/todolists-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addTasksTC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"../../state/tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./TodoList/Todolist\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport const TodoListsList = () => {\r\n\r\n    type TasksStateType = {\r\n        [key: string]: Array<TaskType>\r\n    }\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(setTodoListsTC())\r\n    }, [isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        debugger\r\n        dispatch(addTasksTC(title, todolistId))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoListId: string) {\r\n        debugger\r\n        dispatch(updateTaskStatusTC(id, todoListId, status));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(id, todolistId, newTitle));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodoListFilterTC(todolistId, value));\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodoListsTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodoListTitleTC(title, id));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodoListsTC(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\", justifyContent: \"center\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={8} style={{justifyContent: \"center\", marginTop: \"20px\"}}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: \"20px\", backgroundColor: \"#efc700\", color: \"ivory\"}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    entityStatus={tl.entityStatus}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useFormik} from \"formik\";\r\nimport {FormErrorType, loginTC, logoutTC} from \"./auth-reducer\";\r\nimport {LoginParamsType} from \"../api/auth-api\";\r\n\r\nexport const Login = () => {\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  const validate = (values: LoginParamsType) => {\r\n    const errors: FormErrorType = {};\r\n    if (!values.email) {\r\n      errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n      errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n      errors.password = 'Required'\r\n    } else if (values.password.length < 4) {\r\n      errors.password = 'Must be at least 4 characters long'\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate,\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values));\r\n    },\r\n  })\r\n\r\n\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={\"/\"}/>\r\n  }\r\n\r\n  return <Grid container justify=\"center\">\r\n    <Grid item xs={4}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a href={'https://social-network.samuraijs.com/'}\r\n                 target={'_blank'}> here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps(\"email\")}\r\n            />\r\n            {formik.errors.email ? <div style={{color: \"red\"}}> {formik.errors.email} </div> : null}\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps(\"password\")}\r\n            />\r\n            {formik.errors.password ? <div style={{color: \"red\"}}> {formik.errors.password} </div> : null}\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox onChange={formik.handleChange}\r\n                                 checked={formik.values.rememberMe}\r\n                                 name=\"rememberMe\"/>}\r\n            />\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import React from \"react\";\r\nimport style from \"./Loader.module.css\"\r\n\r\nexport const Loader = () =>\r\n  (\r\n    <div className={style.loader}/>\r\n  )","import React, {useEffect} from 'react'\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {setTodoListsTC} from '../state/todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TodoListsList} from \"../components/TodolistsList/TodoListsList\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"../state/app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {Login} from \"../login/Login\";\r\nimport {Route} from 'react-router-dom';\r\nimport {Loader} from \"../loader/Loader\";\r\nimport {logoutTC} from \"../login/auth-reducer\";\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n  }, [])\r\n\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch();\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <Loader/>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\" style={{backgroundColor: \"#282c34\", color: \"#efc700\"}}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            TODO IT\r\n          </Typography>\r\n          {isLoggedIn && <Button color=\"inherit\" onClick={() => dispatch(logoutTC())}>Log out</Button>}\r\n        </Toolbar>\r\n      </AppBar>\r\n      {status === \"loading\" && <LinearProgress color=\"primary\"/>}\r\n      <Container fixed>\r\n        <Route exact path={'/TodoList'} render={() => <TodoListsList/>}/>\r\n        <Route exact path={'/'} render={() => <TodoListsList/>}/>\r\n        <Route path={'/login'} render={() => <Login/>}/>\r\n      </Container>\r\n      <ErrorSnackbar/>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <BrowserRouter><App/></BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__3n40Y\",\"load5\":\"Loader_load5__2QF10\"};"],"sourceRoot":""}